diff --git a/src/core/or/circuitpadding.c b/src/core/or/circuitpadding.c
index 178f066ba..76bbba25c 100644
--- a/src/core/or/circuitpadding.c
+++ b/src/core/or/circuitpadding.c
@@ -1791,6 +1791,10 @@ circpad_estimate_circ_rtt_on_send(circuit_t *circ,
 void
 circpad_cell_event_nonpadding_sent(circuit_t *on_circ)
 {
+  circpad_event_callback("circpad_cell_event_nonpadding_sent", 
+                         CIRCUIT_IS_ORIGIN(on_circ) ? 
+                         TO_ORIGIN_CIRCUIT(on_circ)->global_identifier : 0);
+
   /* Update global cell count */
   circpad_global_nonpadding_sent++;
 
@@ -1881,6 +1885,10 @@ circpad_check_received_cell(cell_t *cell, circuit_t *circ,
 void
 circpad_cell_event_nonpadding_received(circuit_t *on_circ)
 {
+  circpad_event_callback("circpad_cell_event_nonpadding_received", 
+                         CIRCUIT_IS_ORIGIN(on_circ) ? 
+                         TO_ORIGIN_CIRCUIT(on_circ)->global_identifier : 0);
+
   FOR_EACH_ACTIVE_CIRCUIT_MACHINE_BEGIN(i, on_circ) {
     /* First, update any timestamps */
     on_circ->padding_info[i]->last_cell_time_sec = approx_time();
@@ -1902,6 +1910,10 @@ circpad_cell_event_nonpadding_received(circuit_t *on_circ)
 void
 circpad_cell_event_padding_sent(circuit_t *on_circ)
 {
+  circpad_event_callback("circpad_cell_event_padding_sent", 
+                         CIRCUIT_IS_ORIGIN(on_circ) ? 
+                         TO_ORIGIN_CIRCUIT(on_circ)->global_identifier : 0);
+
   FOR_EACH_ACTIVE_CIRCUIT_MACHINE_BEGIN(i, on_circ) {
     /* Check to see if we've run out of tokens for this state already,
      * and if not, check for other state transitions */
@@ -1928,6 +1940,10 @@ circpad_cell_event_padding_sent(circuit_t *on_circ)
 void
 circpad_cell_event_padding_received(circuit_t *on_circ)
 {
+  circpad_event_callback("circpad_cell_event_padding_received", 
+                         CIRCUIT_IS_ORIGIN(on_circ) ? 
+                         TO_ORIGIN_CIRCUIT(on_circ)->global_identifier : 0);
+
   /* identical to padding sent */
   FOR_EACH_ACTIVE_CIRCUIT_MACHINE_BEGIN(i, on_circ) {
     on_circ->padding_info[i]->last_cell_time_sec = approx_time();
@@ -2196,6 +2212,9 @@ circpad_add_matching_machines(origin_circuit_t *on_circ,
 void
 circpad_machine_event_circ_added_hop(origin_circuit_t *on_circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_added_hop",
+                         on_circ->global_identifier);
+
   /* Since our padding conditions do not specify a max_hops,
    * all we can do is add machines here */
   circpad_add_matching_machines(on_circ, origin_padding_machines);
@@ -2210,6 +2229,8 @@ circpad_machine_event_circ_added_hop(origin_circuit_t *on_circ)
 void
 circpad_machine_event_circ_built(origin_circuit_t *circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_built",
+                         circ->global_identifier);
   circpad_shutdown_old_machines(circ);
   circpad_add_matching_machines(circ, origin_padding_machines);
 }
@@ -2223,6 +2244,9 @@ circpad_machine_event_circ_built(origin_circuit_t *circ)
 void
 circpad_machine_event_circ_purpose_changed(origin_circuit_t *circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_purpose_changed",
+                         circ->global_identifier);
+
   circpad_shutdown_old_machines(circ);
   circpad_add_matching_machines(circ, origin_padding_machines);
 }
@@ -2237,6 +2261,9 @@ circpad_machine_event_circ_purpose_changed(origin_circuit_t *circ)
 void
 circpad_machine_event_circ_has_no_relay_early(origin_circuit_t *circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_has_no_relay_early",
+                         circ->global_identifier);
+
   circpad_shutdown_old_machines(circ);
   circpad_add_matching_machines(circ, origin_padding_machines);
 }
@@ -2252,6 +2279,9 @@ circpad_machine_event_circ_has_no_relay_early(origin_circuit_t *circ)
 void
 circpad_machine_event_circ_has_streams(origin_circuit_t *circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_has_streams",
+                         circ->global_identifier);
+
   circpad_shutdown_old_machines(circ);
   circpad_add_matching_machines(circ, origin_padding_machines);
 }
@@ -2267,6 +2297,9 @@ circpad_machine_event_circ_has_streams(origin_circuit_t *circ)
 void
 circpad_machine_event_circ_has_no_streams(origin_circuit_t *circ)
 {
+  circpad_event_callback("circpad_machine_event_circ_has_no_streams",
+                         circ->global_identifier);
+
   circpad_shutdown_old_machines(circ);
   circpad_add_matching_machines(circ, origin_padding_machines);
 }
@@ -3041,6 +3074,13 @@ circpad_free_all(void)
   }
 }
 
+MOCK_IMPL(void,
+circpad_event_callback,(const char *event, uint32_t circuit_identifier))
+{
+  (void)event;
+  (void)circuit_identifier;
+}
+
 /* Serialization */
 // TODO: Should we use keyword=value here? Are there helpers for that?
 #if 0
diff --git a/src/core/or/circuitpadding.h b/src/core/or/circuitpadding.h
index a5c46b439..75672b139 100644
--- a/src/core/or/circuitpadding.h
+++ b/src/core/or/circuitpadding.h
@@ -750,6 +750,11 @@ circpad_decision_t circpad_send_padding_cell_for_callback(
 
 void circpad_free_all(void);
 
+// called by circpad_cell_event_* and circpad_machine_event_* callbacks for the
+// specific event, used to generate traces for circpad simulations.
+MOCK_DECL(void,
+circpad_event_callback, (const char *event, uint32_t circuit_identifier));
+
 #ifdef CIRCUITPADDING_PRIVATE
 STATIC void  machine_spec_free_(circpad_machine_spec_t *m);
 #define machine_spec_free(chan) \
diff --git a/src/test/include.am b/src/test/include.am
index d8e25dea9..650f53f3e 100644
--- a/src/test/include.am
+++ b/src/test/include.am
@@ -118,6 +118,7 @@ src_test_test_SOURCES += \
 	src/test/test_channel.c \
 	src/test/test_channelpadding.c \
 	src/test/test_circuitpadding.c \
+	src/test/test_circuitpadding_sim.c \
 	src/test/test_channeltls.c \
 	src/test/test_checkdir.c \
 	src/test/test_circuitlist.c \
@@ -338,6 +339,7 @@ src_test_test_timers_LDFLAGS = $(src_test_test_LDFLAGS)
 
 # ADD_C_FILE: INSERT HEADERS HERE.
 noinst_HEADERS+= \
+	src/test/circuitpadding_sim_arg.h \
 	src/test/fakechans.h \
 	src/test/hs_test_helpers.h \
 	src/test/log_test_helpers.h \
diff --git a/src/test/test.c b/src/test/test.c
index 6dbec26fa..f2849015b 100644
--- a/src/test/test.c
+++ b/src/test/test.c
@@ -834,6 +834,7 @@ struct testgroup_t testgroups[] = {
   { "checkdir/", checkdir_tests },
   { "circuitbuild/", circuitbuild_tests },
   { "circuitpadding/", circuitpadding_tests },
+  { "circuitpadding_sim/", circuitpadding_sim_tests },
   { "circuitlist/", circuitlist_tests },
   { "circuitmux/", circuitmux_tests },
   { "circuitstats/", circuitstats_tests },
diff --git a/src/test/test.h b/src/test/test.h
index 76c4c0ec7..ac644e15f 100644
--- a/src/test/test.h
+++ b/src/test/test.h
@@ -188,6 +188,7 @@ extern struct testcase_t cell_queue_tests[];
 extern struct testcase_t channel_tests[];
 extern struct testcase_t channelpadding_tests[];
 extern struct testcase_t circuitpadding_tests[];
+extern struct testcase_t circuitpadding_sim_tests[];
 extern struct testcase_t channeltls_tests[];
 extern struct testcase_t checkdir_tests[];
 extern struct testcase_t circuitbuild_tests[];
diff --git a/src/test/testing_common.c b/src/test/testing_common.c
index e14a16940..e24d253ae 100644
--- a/src/test/testing_common.c
+++ b/src/test/testing_common.c
@@ -28,6 +28,7 @@
 #include "lib/crypt_ops/crypto_init.h"
 #include "lib/version/torversion.h"
 #include "app/main/subsysmgr.h"
+#include "test/circuitpadding_sim_arg.h"
 
 #include <stdio.h>
 #ifdef HAVE_FCNTL_H
@@ -286,6 +287,15 @@ main(int c, const char **v)
       loglevel = LOG_DEBUG;
     } else if (!strcmp(v[i], "--accel")) {
       accel_crypto = 1;
+    } else if (!strcmp(v[i], "--circpadsim")) {
+      if (i + 3 > c) {
+        printf("not enough arguments for --circpadsim, expect %s %s, exiting.\n",
+          v[0], " --circpadsim <client-trace> <relay-trace>");
+        return 1;
+      }
+      circpad_sim_arg_client_trace = v[i+1];
+      circpad_sim_arg_relay_trace = v[i+2];
+      i += 2;
     } else {
       v[i_out++] = v[i];
     }
